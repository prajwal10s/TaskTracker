// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider       = "postgresql"
  url            = env("DATABASE_URL")
  directUrl      = env("DIRECT_URL") // Important for serverless environments with pooler
}

// Necessary for Next auth
model Account {
    id                      String  @id @default(cuid())
    userId                  String
    type                    String
    provider                String
    providerAccountId       String
    refresh_token           String? // @db.Text
    access_token            String? // @db.Text
    expires_at              Int?
    token_type              String?
    scope                   String?
    id_token                String? // @db.Text
    session_state           String?
    user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id             String   @id @default(cuid())
    sessionToken   String   @unique
    userId         String
    expires        DateTime
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]

    // Relations where User is the creator
    createdProjects Project[] @relation(name: "CreatedProjects") // Back-relation for projects created by this user
    createdTasks    Task[]    @relation(name: "TaskCreator")     // Tasks created by this user
    
    //Relations where User is involved as a member or assignee
    memberOfProjects Project[] @relation(name: "ProjectMembers") // Back-relation for projects this user is a member of
    assignedTasks    Task[]    @relation(name: "TaskAssignee")    // Tasks assigned to this user (one-to-many)
    
}

model VerificationToken {
    identifier      String
    token           String   @unique
    expires         DateTime
    @@unique([identifier, token])
}


model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation: Project has one creator (User)
  creatorId   String // The user who created the project
  creator     User     @relation(name: "CreatedProjects", fields: [creatorId], references: [id])

// Relation: Project has many members (Users) - many-to-many
    members     User[]   @relation(name:"ProjectMembers")// A project can have many team members (many-to-many relationship)
  // Relation: Project has many tasks
  tasks       Task[]   @relation(name:"ProjectTasks")// A project can have many tasks
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO) //  from statusENUM
  priority    Priority   @default(MEDIUM) // from propertyENUM
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relation: Task belongs to a project (optional)
  projectId   String?    // Task belongs to a project (optional)
  project     Project?   @relation(name:"ProjectTasks", fields: [projectId], references: [id], onDelete: SetNull)

  // Relation: Task can be assigned to a user (optional)
  assigneeId  String?    
  assignee    User?      @relation(name:"TaskAssignee",fields: [assigneeId], references: [id], onDelete: SetNull)

  // Relation: The user who created the task
  creatorId   String     // The user who created the task
  creator     User       @relation(name:"TaskCreator", fields: [creatorId], references: [id])

  // Relation: Many-to-many relationship with tags
  tags        Tag[]      @relation(name:"TaskTags")// Many-to-many relationship with tags


  //adding index to improve dashboard performance

  @@index(fields: [assigneeId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Bug", "Feature", "Urgent", "Marketing"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]   @relation(name:"TaskTags")// Many-to-many relationship with tasks
}